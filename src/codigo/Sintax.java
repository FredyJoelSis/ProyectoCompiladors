
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\005\000\002\004" +
    "\006\000\002\003\010\000\002\003\007\000\002\003\011" +
    "\000\002\003\012\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\003\000\002\011\004\000" +
    "\002\024\005\000\002\024\005\000\002\024\007\000\002" +
    "\024\007\000\002\024\007\000\002\013\007\000\002\013" +
    "\024\000\002\005\010\000\002\015\005\000\002\015\006" +
    "\000\002\006\006\000\002\006\007\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\014\007\000\002\017\003" +
    "\000\002\012\005\000\002\020\005\000\002\020\006\000" +
    "\002\007\007\000\002\007\013\000\002\007\011\000\002" +
    "\007\005\000\002\007\007\000\002\022\003\000\002\022" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\023\005\000\002\023\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\004\004\004\001\002\000\004\015\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\053\224\001\002\000\004\016\210\001\002\000" +
    "\004\021\012\001\002\000\040\005\014\006\020\014\023" +
    "\022\032\025\031\026\044\027\035\031\024\036\015\040" +
    "\027\041\021\042\025\046\042\047\041\050\016\001\002" +
    "\000\042\005\ufff8\006\ufff8\014\ufff8\022\ufff8\025\ufff8\026" +
    "\ufff8\027\ufff8\031\ufff8\036\ufff8\040\ufff8\041\ufff8\042\ufff8" +
    "\046\ufff8\047\ufff8\050\ufff8\052\ufff8\001\002\000\056\005" +
    "\uffcb\006\uffcb\007\uffcb\010\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\022\uffcb\023\uffcb\025\uffcb\026\uffcb\027\uffcb\031\uffcb\032" +
    "\uffcb\036\uffcb\040\uffcb\041\uffcb\042\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\052\uffcb\001\002\000\010\026\173\027\174\031" +
    "\172\001\002\000\042\005\uffd5\006\uffd5\014\uffd5\022\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\031\uffd5\036\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\046\uffd5\047\uffd5\050\uffd5\052\uffd5\001\002" +
    "\000\042\005\ufff9\006\ufff9\014\ufff9\022\ufff9\025\ufff9\026" +
    "\ufff9\027\ufff9\031\ufff9\036\ufff9\040\ufff9\041\ufff9\042\ufff9" +
    "\046\ufff9\047\ufff9\050\ufff9\052\ufff9\001\002\000\056\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\012\uffcc\013\uffcc\014\uffcc" +
    "\022\uffcc\023\uffcc\025\uffcc\026\uffcc\027\uffcc\031\uffcc\032" +
    "\uffcc\036\uffcc\040\uffcc\041\uffcc\042\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\052\uffcc\001\002\000\004\043\165\001\002\000" +
    "\042\005\ufff2\006\ufff2\014\ufff2\022\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\031\ufff2\036\ufff2\040\ufff2\041\ufff2\042\ufff2\046" +
    "\ufff2\047\ufff2\050\ufff2\052\ufff2\001\002\000\042\005\ufff3" +
    "\006\ufff3\014\ufff3\022\ufff3\025\ufff3\026\ufff3\027\ufff3\031" +
    "\ufff3\036\ufff3\040\ufff3\041\ufff3\042\ufff3\046\ufff3\047\ufff3" +
    "\050\ufff3\052\ufff3\001\002\000\042\005\ufff4\006\ufff4\014" +
    "\ufff4\022\ufff4\025\ufff4\026\ufff4\027\ufff4\031\ufff4\036\ufff4" +
    "\040\ufff4\041\ufff4\042\ufff4\046\ufff4\047\ufff4\050\ufff4\052" +
    "\ufff4\001\002\000\042\005\ufff1\006\ufff1\014\ufff1\022\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\031\ufff1\036\ufff1\040\ufff1\041" +
    "\ufff1\042\ufff1\046\ufff1\047\ufff1\050\ufff1\052\ufff1\001\002" +
    "\000\042\005\uffee\006\uffee\014\uffee\022\uffee\025\uffee\026" +
    "\uffee\027\uffee\031\uffee\036\uffee\040\uffee\041\uffee\042\uffee" +
    "\046\uffee\047\uffee\050\uffee\052\uffee\001\002\000\042\005" +
    "\uffef\006\uffef\014\uffef\022\uffef\025\uffef\026\uffef\027\uffef" +
    "\031\uffef\036\uffef\040\uffef\041\uffef\042\uffef\046\uffef\047" +
    "\uffef\050\uffef\052\uffef\001\002\000\042\005\ufff6\006\ufff6" +
    "\014\ufff6\022\ufff6\025\ufff6\026\ufff6\027\ufff6\031\ufff6\036" +
    "\ufff6\040\ufff6\041\ufff6\042\ufff6\046\ufff6\047\ufff6\050\ufff6" +
    "\052\ufff6\001\002\000\006\005\014\006\020\001\002\000" +
    "\004\031\120\001\002\000\042\005\ufff7\006\ufff7\014\ufff7" +
    "\022\ufff7\025\ufff7\026\ufff7\027\ufff7\031\ufff7\036\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\046\ufff7\047\ufff7\050\ufff7\052\ufff7" +
    "\001\002\000\004\052\117\001\002\000\042\005\ufffa\006" +
    "\ufffa\014\ufffa\022\ufffa\025\ufffa\026\ufffa\027\ufffa\031\ufffa" +
    "\036\ufffa\040\ufffa\041\ufffa\042\ufffa\046\ufffa\047\ufffa\050" +
    "\ufffa\052\ufffa\001\002\000\042\005\ufff0\006\ufff0\014\ufff0" +
    "\022\ufff0\025\ufff0\026\ufff0\027\ufff0\031\ufff0\036\ufff0\040" +
    "\ufff0\041\ufff0\042\ufff0\046\ufff0\047\ufff0\050\ufff0\052\ufff0" +
    "\001\002\000\010\007\053\010\051\012\052\001\002\000" +
    "\042\005\ufff5\006\ufff5\014\ufff5\022\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\031\ufff5\036\ufff5\040\ufff5\041\ufff5\042\ufff5\046" +
    "\ufff5\047\ufff5\050\ufff5\052\ufff5\001\002\000\006\014\070" +
    "\031\071\001\002\000\004\025\064\001\002\000\042\005" +
    "\014\006\020\014\023\022\032\025\031\026\044\027\035" +
    "\031\024\036\015\040\027\041\021\042\025\046\042\047" +
    "\041\050\016\052\uffed\001\002\000\010\005\014\006\020" +
    "\031\046\001\002\000\012\007\053\010\051\012\052\032" +
    "\050\001\002\000\004\032\047\001\002\000\042\005\uffc6" +
    "\006\uffc6\014\uffc6\022\uffc6\025\uffc6\026\uffc6\027\uffc6\031" +
    "\uffc6\036\uffc6\040\uffc6\041\uffc6\042\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\052\uffc6\001\002\000\042\005\uffc7\006\uffc7\014" +
    "\uffc7\022\uffc7\025\uffc7\026\uffc7\027\uffc7\031\uffc7\036\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\046\uffc7\047\uffc7\050\uffc7\052" +
    "\uffc7\001\002\000\006\005\uffc9\006\uffc9\001\002\000\006" +
    "\005\uffc8\006\uffc8\001\002\000\006\005\uffca\006\uffca\001" +
    "\002\000\006\005\014\006\020\001\002\000\004\032\056" +
    "\001\002\000\050\005\uffd1\006\uffd1\007\053\010\051\012" +
    "\052\014\uffd1\022\uffd1\025\uffd1\026\uffd1\027\uffd1\031\uffd1" +
    "\036\uffd1\040\uffd1\041\uffd1\042\uffd1\046\uffd1\047\uffd1\050" +
    "\uffd1\052\uffd1\001\002\000\006\005\014\006\020\001\002" +
    "\000\050\005\uffcf\006\uffcf\007\053\010\051\012\052\014" +
    "\uffcf\022\uffcf\025\uffcf\026\uffcf\027\uffcf\031\uffcf\036\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\046\uffcf\047\uffcf\050\uffcf\052" +
    "\uffcf\001\002\000\006\005\014\006\020\001\002\000\042" +
    "\005\uffd0\006\uffd0\014\uffd0\022\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\031\uffd0\036\uffd0\040\uffd0\041\uffd0\042\uffd0\046\uffd0" +
    "\047\uffd0\050\uffd0\052\uffd0\001\002\000\004\052\uffec\001" +
    "\002\000\004\014\065\001\002\000\004\030\066\001\002" +
    "\000\004\014\067\001\002\000\042\005\uffd6\006\uffd6\014" +
    "\uffd6\022\uffd6\025\uffd6\026\uffd6\027\uffd6\031\uffd6\036\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\046\uffd6\047\uffd6\050\uffd6\052" +
    "\uffd6\001\002\000\004\031\112\001\002\000\004\025\072" +
    "\001\002\000\004\014\073\001\002\000\004\027\074\001" +
    "\002\000\004\014\075\001\002\000\004\046\076\001\002" +
    "\000\004\025\077\001\002\000\004\014\100\001\002\000" +
    "\004\030\101\001\002\000\004\014\102\001\002\000\004" +
    "\031\103\001\002\000\004\011\104\001\002\000\004\005" +
    "\105\001\002\000\004\031\106\001\002\000\004\011\107" +
    "\001\002\000\004\005\110\001\002\000\004\051\111\001" +
    "\002\000\044\005\uffe5\006\uffe5\014\uffe5\022\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\031\uffe5\033\uffe5\036\uffe5\040\uffe5\041" +
    "\uffe5\042\uffe5\046\uffe5\047\uffe5\050\uffe5\052\uffe5\001\002" +
    "\000\004\014\113\001\002\000\004\051\114\001\002\000" +
    "\044\005\uffe6\006\uffe6\014\uffe6\022\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\031\uffe6\033\uffe6\036\uffe6\040\uffe6\041\uffe6\042" +
    "\uffe6\046\uffe6\047\uffe6\050\uffe6\052\uffe6\001\002\000\006" +
    "\005\014\006\020\001\002\000\042\005\uffce\006\uffce\014" +
    "\uffce\022\uffce\025\uffce\026\uffce\027\uffce\031\uffce\036\uffce" +
    "\040\uffce\041\uffce\042\uffce\046\uffce\047\uffce\050\uffce\052" +
    "\uffce\001\002\000\004\053\uffff\001\002\000\004\025\121" +
    "\001\002\000\006\005\014\006\020\001\002\000\004\023" +
    "\124\001\002\000\004\035\157\001\002\000\004\024\125" +
    "\001\002\000\004\025\131\001\002\000\004\034\127\001" +
    "\002\000\006\023\124\035\uffe3\001\002\000\004\035\uffe2" +
    "\001\002\000\012\014\132\027\136\031\135\047\041\001" +
    "\002\000\022\005\014\006\020\025\031\026\145\027\142" +
    "\030\144\031\141\050\016\001\002\000\004\033\uffd9\001" +
    "\002\000\004\033\137\001\002\000\004\033\uffd8\001\002" +
    "\000\004\033\uffd7\001\002\000\006\024\125\034\uffe1\001" +
    "\002\000\004\034\uffe0\001\002\000\004\014\156\001\002" +
    "\000\004\014\155\001\002\000\004\014\154\001\002\000" +
    "\004\014\153\001\002\000\006\005\014\006\020\001\002" +
    "\000\004\014\151\001\002\000\012\007\053\010\051\012" +
    "\052\014\150\001\002\000\004\033\uffda\001\002\000\004" +
    "\033\uffde\001\002\000\010\007\053\010\051\012\052\001" +
    "\002\000\004\033\uffdb\001\002\000\004\033\uffdc\001\002" +
    "\000\004\033\uffdd\001\002\000\004\033\uffdf\001\002\000" +
    "\042\005\uffe4\006\uffe4\014\uffe4\022\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\031\uffe4\036\uffe4\040\uffe4\041\uffe4\042\uffe4\046" +
    "\uffe4\047\uffe4\050\uffe4\052\uffe4\001\002\000\010\007\053" +
    "\010\051\012\052\001\002\000\006\005\014\006\020\001" +
    "\002\000\004\013\163\001\002\000\042\005\uffcd\006\uffcd" +
    "\014\uffcd\022\uffcd\025\uffcd\026\uffcd\027\uffcd\031\uffcd\036" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\052\uffcd\001\002\000\004\045\171\001\002\000\004\027" +
    "\166\001\002\000\004\044\167\001\002\000\006\043\165" +
    "\045\uffd3\001\002\000\004\045\uffd2\001\002\000\042\005" +
    "\uffd4\006\uffd4\014\uffd4\022\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\031\uffd4\036\uffd4\040\uffd4\041\uffd4\042\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\052\uffd4\001\002\000\004\037\207\001\002" +
    "\000\012\005\014\006\020\027\200\031\177\001\002\000" +
    "\004\037\175\001\002\000\042\005\uffeb\006\uffeb\014\uffeb" +
    "\022\uffeb\025\uffeb\026\uffeb\027\uffeb\031\uffeb\036\uffeb\040" +
    "\uffeb\041\uffeb\042\uffeb\046\uffeb\047\uffeb\050\uffeb\052\uffeb" +
    "\001\002\000\004\032\205\001\002\000\004\032\203\001" +
    "\002\000\004\032\201\001\002\000\004\037\202\001\002" +
    "\000\042\005\uffe8\006\uffe8\014\uffe8\022\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\031\uffe8\036\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\046\uffe8\047\uffe8\050\uffe8\052\uffe8\001\002\000\004\037" +
    "\204\001\002\000\042\005\uffe7\006\uffe7\014\uffe7\022\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\031\uffe7\036\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\046\uffe7\047\uffe7\050\uffe7\052\uffe7\001\002" +
    "\000\004\037\206\001\002\000\042\005\uffe9\006\uffe9\014" +
    "\uffe9\022\uffe9\025\uffe9\026\uffe9\027\uffe9\031\uffe9\036\uffe9" +
    "\040\uffe9\041\uffe9\042\uffe9\046\uffe9\047\uffe9\050\uffe9\052" +
    "\uffe9\001\002\000\042\005\uffea\006\uffea\014\uffea\022\uffea" +
    "\025\uffea\026\uffea\027\uffea\031\uffea\036\uffea\040\uffea\041" +
    "\uffea\042\uffea\046\uffea\047\uffea\050\uffea\052\uffea\001\002" +
    "\000\004\025\211\001\002\000\006\014\212\027\213\001" +
    "\002\000\004\027\217\001\002\000\006\017\214\020\215" +
    "\001\002\000\004\020\216\001\002\000\004\021\ufffd\001" +
    "\002\000\004\021\ufffe\001\002\000\004\014\220\001\002" +
    "\000\006\017\221\020\222\001\002\000\004\020\223\001" +
    "\002\000\004\021\ufffc\001\002\000\004\021\ufffb\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\004\002\004\001\001\000\006\003\010\004" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\012\007\027\010\042\011\033\012\037\013\016\014\032" +
    "\017\021\022\036\023\025\024\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\005\012\007" +
    "\027\010\042\011\062\012\037\013\016\014\032\017\021" +
    "\022\036\023\025\024\035\001\001\000\004\022\044\001" +
    "\001\000\004\021\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\054\001\001\000\002" +
    "\001\001\000\004\021\056\001\001\000\004\022\057\001" +
    "\001\000\004\021\060\001\001\000\004\022\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\121" +
    "\001\001\000\004\015\122\001\001\000\002\001\001\000" +
    "\004\006\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\127\001\001\000\002\001\001\000\006\013" +
    "\132\016\133\001\001\000\010\007\145\017\142\022\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\151\001\001\000\002" +
    "\001\001\000\004\021\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\160\001\001\000\004\022\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = "";
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= InicioHtml cuerpo FinHtml 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                         resultado = "<HTML>\n" + String.valueOf(b) + "</HTML> \n";   
                       
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo ::= encabezado InicioBody internoMixto FinBody 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                         RESULT = String.valueOf(a) + "<BODY> \n" + String.valueOf(c) + "</BODY> \n";
               	       
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encabezado ::= InicioHead InicioTitle SignoIgual TextoGeneral FinTitle FinHead 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                          RESULT = "<HEAD>\n" + "<TITLE>" + String.valueOf(a) + "</TITLE>" + "</HEAD>";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("encabezado",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // encabezado ::= InicioHead InicioTitle SignoIgual TextoGeneral FinHead 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                          RESULT = "<HEAD> \n" + "<TITLE> \n" +  String.valueOf(a) + "</HEAD>  \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("encabezado",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // encabezado ::= InicioHead InicioTitle SignoIgual Comillas TextoGeneral Comillas FinHead 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                          RESULT = "<HEAD>\n" + "<TITLE>" + String.valueOf(c) + "</HEAD>";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("encabezado",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // encabezado ::= InicioHead InicioTitle SignoIgual Comillas TextoGeneral Comillas FinTitle FinHead 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                          RESULT = "<HEAD>\n" + "<TITLE>" + String.valueOf(e) + "</TITLE>" + "</HEAD>";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("encabezado",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // interno ::= TextoGeneral 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                          RESULT = "<p>" + String.valueOf(a) + "</p>";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("interno",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // interno ::= imagenes 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                          RESULT = String.valueOf(a);
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("interno",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // interno ::= tablas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                          RESULT = String.valueOf(a);  
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("interno",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // interno ::= enlaces 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                          RESULT = String.valueOf(a);
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("interno",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // interno ::= operaciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                          RESULT = String.valueOf(a);
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("interno",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // interno ::= listas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                          RESULT = String.valueOf(a);
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("interno",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // interno ::= Texto 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                          RESULT = "<p>" + String.valueOf(a) + "</p>";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("interno",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // interno ::= Comillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                          RESULT = String.valueOf(a);
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("interno",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // interno ::= correos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                          RESULT = String.valueOf(a); 
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("interno",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // interno ::= Coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                          RESULT = String.valueOf(a);
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("interno",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // interno ::= negrita 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                          RESULT = String.valueOf(a);
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("interno",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // interno ::= SalidaTexto 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                          RESULT = "<p>"  + String.valueOf(a) + "</p>";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("interno",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // interno ::= combinaciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                          RESULT = String.valueOf(a);
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("interno",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // internoMixto ::= interno 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                           RESULT = String.valueOf(a);
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("internoMixto",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // internoMixto ::= interno internoMixto 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                           RESULT = String.valueOf(a) + String.valueOf(b);
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("internoMixto",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // negrita ::= InicioTextoB TextoGeneral FinTextoB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                           RESULT = "<b>" + String.valueOf(a) + "</b>\n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("negrita",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // negrita ::= InicioTextoB Texto FinTextoB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                           RESULT = "<b>"+ String.valueOf(a) + "</b>\n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("negrita",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // negrita ::= InicioTextoB ParA numeroG ParC FinTextoB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                           RESULT = "<b>" + String.valueOf(a) + String.valueOf(b) + String.valueOf(c)  +"</b>\n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("negrita",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // negrita ::= InicioTextoB ParA TextoGeneral ParC FinTextoB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                           RESULT = "<b>" + String.valueOf(a) + String.valueOf(b) + String.valueOf(c) +  "</b>\n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("negrita",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // negrita ::= InicioTextoB ParA Texto ParC FinTextoB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                           RESULT = "<b>" + String.valueOf(a) + String.valueOf(b) + String.valueOf(c) + "</b>\n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("negrita",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // imagenes ::= InicioImg Comillas Texto Comillas FinImg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                           RESULT = "<IMG SRC=" + String.valueOf(a) + String.valueOf(b) + String.valueOf(c) + ">";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("imagenes",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // imagenes ::= InicioImg Texto SignoIgual Comillas TextoGeneral Comillas Enlace SignoIgual Comillas URL Comillas Texto DosPuntos Digito Texto DosPuntos Digito FinImg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		
                           RESULT =  "<IMG SRC" + String.valueOf(a) + String.valueOf(b) + String.valueOf(c)  + ">";
                         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("imagenes",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-17)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tablas ::= InicioTable Texto SignoIgual numeroG estructuraTablas FinTable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                            RESULT = "<TABLE BORDER="+a+">\n" + String.valueOf(b) + "</TABLE>\n";  
                          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tablas",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // estructuraTablas ::= InicioTr columnas FinTr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                            RESULT = "<TR>" + String.valueOf(a) + "</TR>";
                           
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructuraTablas",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // estructuraTablas ::= InicioTr columnas FinTr estructuraTablas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            RESULT = "<TR>" + String.valueOf(a) + "</TR>\n" + String.valueOf(b);
                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructuraTablas",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // columnas ::= InicioTh SignoIgual internoColumna FinTh 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                             RESULT = "<TH>" + String.valueOf(a) + "</TH>";
                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("columnas",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // columnas ::= InicioTh SignoIgual internoColumna FinTh columnas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                             RESULT = "<TH>" + String.valueOf(a) + "</TH>" + String.valueOf(b);
                            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("columnas",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // internoColumna ::= Comillas Texto Comillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                              RESULT = String.valueOf(a);
                             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("internoColumna",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // internoColumna ::= Comillas operaciones Comillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                               RESULT = String.valueOf(a);
                              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("internoColumna",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // internoColumna ::= Comillas TextoGeneral Comillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                RESULT = String.valueOf(a);
                              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("internoColumna",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // internoColumna ::= Comillas correos Comillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                RESULT = String.valueOf(a);
                              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("internoColumna",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // internoColumna ::= Comillas URL Comillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                RESULT = String.valueOf(a);
                              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("internoColumna",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // internoColumna ::= Comillas numeroG Comillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                RESULT = String.valueOf(a);
                              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("internoColumna",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // internoColumna ::= imagenes 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                RESULT = String.valueOf(a); 
                              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("internoColumna",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // internoColumna ::= Texto 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                RESULT = String.valueOf(a); 
                              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("internoColumna",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // internoColumna ::= TextoGeneral 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                RESULT = String.valueOf(a); 
                              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("internoColumna",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // enlaces ::= Enlace SignoIgual Comillas URL Comillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                               RESULT = "<a href=" +a + b + c + ">" + "</a>";
                              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("enlaces",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // correos ::= Correo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                RESULT = String.valueOf(a);
                              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("correos",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // listas ::= InicioList estructuraLista FinList 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                 RESULT = "<OL>\n" + String.valueOf(a) + "</OL>\n";
                               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("listas",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // estructuraLista ::= InicioLi TextoGeneral FinLi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                                 RESULT = "<LI>" + String.valueOf(a) + "</LI>\n";
                               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructuraLista",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // estructuraLista ::= InicioLi TextoGeneral FinLi estructuraLista 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                 RESULT = "<LI>" + String.valueOf(a) + "</LI>\n" +String.valueOf(b);
                               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estructuraLista",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operaciones ::= ParA numeroG signosOp numeroG ParC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                  RESULT = String.valueOf(a) + String.valueOf(b) + String.valueOf(c) +
                                           String.valueOf(d) + String.valueOf(e);
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operaciones ::= ParA numeroG signosOp numeroG ParC signosOp numeroG signosOp numeroG 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                  RESULT = String.valueOf(a) + String.valueOf(b) +  String.valueOf(c) +
                                           String.valueOf(d) + String.valueOf(e) +  String.valueOf(f) + 
                                           String.valueOf(g) + String.valueOf(h) +  String.valueOf(i);
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operaciones ::= ParA numeroG signosOp numeroG ParC signosOp numeroG 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                  RESULT =  String.valueOf(a) + String.valueOf(b) +  String.valueOf(c) +
                                            String.valueOf(d) + String.valueOf(e) +  String.valueOf(f) + 
                                            String.valueOf(g); 
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operaciones ::= numeroG signosOp numeroG 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                   RESULT = String.valueOf(a) + String.valueOf(b) +  String.valueOf(c);
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operaciones ::= SignoIgual numeroG signosOp numeroG PuntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                   RESULT = String.valueOf(a) + String.valueOf(b) +  String.valueOf(c) +
                                            String.valueOf(d) + String.valueOf(e);
                                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // numeroG ::= NDecimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                           RESULT = String.valueOf(a);
                         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("numeroG",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // numeroG ::= Digito 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                           RESULT = String.valueOf(a);
                         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("numeroG",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // signosOp ::= SignoMas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            RESULT = String.valueOf(a);
                          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("signosOp",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // signosOp ::= SignoMenos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            RESULT = String.valueOf(a);
                          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("signosOp",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // signosOp ::= SignoMulti 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            RESULT = String.valueOf(a);
                          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("signosOp",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // combinaciones ::= ParA numeroG ParC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("combinaciones",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // combinaciones ::= ParA Texto ParC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("combinaciones",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
